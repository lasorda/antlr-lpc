#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "wizard.h"



varargs void reg_wizard(string module, string alias_func, string exec_func, int origin, int sulv)
{
    "/cmd/wizard.c"->register_wizard(module, alias_func,file_name(this_object()), exec_func, origin, 1, sulv);
}

varargs void reg_wizard_ext(string module, string alias_func, string exec_mod, string exec_func, int origin, int sulv)
{
	"/cmd/wizard.c"->register_wizard(module, alias_func, exec_mod, exec_func, origin, 1, sulv);
}

varargs void reg_wizard_nouid(string module, string alias_func, string exec_func, int origin, int sulv)
{
    "/cmd/wizard.c"->register_wizard(module, alias_func,file_name(this_object()), exec_func, origin, 0, sulv);
}
#line 2 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 3 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/macros.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/user_prop.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/prot_macros.h"
#line 6 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/scene.h"
#line 22 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/scene.h"
static mapping g_special_scene_name = ([
        "scene_guaji" : "挂机",
        "scene_turtle" : "小龟赛跑",
        "scene_aa" : "梦幻攻防战",
]);
#line 7 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/open_ui_fix.h"
#line 8 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/timer.h"
#line 9 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 3 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/property.c"
#line 88 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/property.c"
static string * _X_gRunPropertyArray = ({});
static string * _X_gPersistPropertyArray = ({});
static int origin_have_data;

static mixed _X_gQCVar = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ([])); mixed get__X_gQCVar () { if(undefinedp(_X_gQCVar)) { _X_gQCVar = ([]); } return _X_gQCVar; } void set__X_gQCVar (mixed value) { _X_gQCVar = value; } void clear__X_gQCVar () { _X_gQCVar = ([]); } ;

mixed _X_Get_qcvar()
{
	return _X_gQCVar;
}


string _X_SerializeRunVariable()
{
	string each;
	mapping vars = ([]);
	string * all;
	all = _X_gRunPropertyArray + _X_gPersistPropertyArray;
	if(sizeof(all) == 0) return "";

	foreach(each in all)
	{
		vars[each] = call_other(this_object(), "get_"+each);
		call_other(this_object(), "set_"+each, 0);
	}
	return save_variable(vars);
}


string _X_SerializeOnlyRunVariable()
{
	string each;
	mapping vars = ([]);
	string * all;
	all = _X_gRunPropertyArray;
	if(sizeof(all) == 0) return "";

	foreach(each in all)
	{
		vars[each] = call_other(this_object(), "get_"+each);
	}
	return save_variable(vars);
}

void _X_UnSerializeRunVariable(string str)
{
	mapping vars;
	string var;
	if(sizeof(str) == 0) return;
	vars = restore_variable(str);
	if(mapp(vars) ==0) return;
	foreach(var in keys(vars))
	{
		call_other(this_object(), "set_"+var, vars[var]);
	}
}

int SystemStartTime = 0;
static mixed IsDirty = 0; mixed get_IsDirty () { if(undefinedp(IsDirty)) { IsDirty = 0; } return IsDirty; } void set_IsDirty (mixed value) { IsDirty = value; } ;

static mixed ObjFile = "";
static mixed mdObjFile = "";
void set_ObjFile(string filename)
{
	int len = sizeof(filename);
	ObjFile = filename;
	if(len && filename[len-2..] != ".o")
	{
		ObjFile += ".o";
	}
	assure_file(ObjFile);
}

void set_mdObjFile(string filename)
{
	int len = sizeof(filename);
	mdObjFile = filename;
	if(len && filename[len-2..] != ".o")
	{
		mdObjFile += ".o";
	}
	assure_file(mdObjFile);
}

string get_ObjFile()
{
	return ObjFile;
}

string get_mdObjFile()
{
	return mdObjFile;
}

static mixed NotPersist = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), 0); mixed get_NotPersist () { if(undefinedp(NotPersist)) { NotPersist = 0; } return NotPersist; } void set_NotPersist (mixed value) { NotPersist = value; } void clear_NotPersist () { NotPersist = 0; }

varargs void persist(int delay)
{
	int now = time();
	int save = 0;

	if(delay)
	{
		IsDirty = 1;
		return;
	}
	if(sizeof(_X_gPersistPropertyArray) == 0) return;
	foreach(string each in _X_gPersistPropertyArray)
	{
		mixed val;
		if(each == "File") continue;
		val = call_other(this_object(), "get_"+each);
		if((intp(val) && val != 0) || sizeof(val) != 0)
		{
			save = 1;
			break;
		}
	}
	if(sizeof(ObjFile) == 0)
	{
		throw("ObjFile is empty");
		return;
	}
	IsDirty = 0;
	if(save == 0)
	{
		if(origin_have_data)
		{
			if(!NotPersist)
			{
				save_object(ObjFile);
				if (sizeof(mdObjFile) && "cmd/command"->get_gHasMdDat())
				{
					assure_file(mdObjFile);
					save_object(mdObjFile);
				}
			}
		}
		return;
	}
	if(boottime() != SystemStartTime)
	{
		SystemStartTime = boottime();
	}

	if(!NotPersist)
	{
		save_object(ObjFile);
		if (sizeof(mdObjFile) && "cmd/command"->get_gHasMdDat())
		{
			assure_file(mdObjFile);
			save_object(mdObjFile);
		}
	}
	origin_have_data = 1;
}

static int _x_persist_time = 0;

void mpersist()
{
	if(_x_persist_time + 5 <= time())
	{
		persist();
		_x_persist_time = time();
        "cmd/persist_mgr.c"->add_persist(file_name(this_object()));
	}
}

void resume()
{
	string each;
	if(sizeof(ObjFile) == 0)
	{
		throw("ObjFile is empty");
		return;
	}

	if (sizeof(mdObjFile) && "cmd/command"->get_gHasMdDat())
	{
		mixed st = stat(mdObjFile);
		if ( arrayp(st) && sizeof(st) >= 2) restore_object(mdObjFile);
		else restore_object(ObjFile);
	}
	else restore_object(ObjFile);


	foreach(each in _X_gPersistPropertyArray + _X_gRunPropertyArray)
	{
		call_other(this_object(), "get_"+each);
	}
	if(boottime() != SystemStartTime)
	{
		foreach(each in _X_gRunPropertyArray)
		{
			call_other(this_object(), "clear_"+each);
		}
	}

	foreach(each in _X_gPersistPropertyArray)
	{
		mixed val;
		if(each == "File") continue;
		val = call_other(this_object(), "get_"+each);
		if((intp(val) && val != 0) || sizeof(val) != 0)
		{
			origin_have_data =1;
			break;
		}
	}
}

void _X_preload_object(int addr1, int addr2)
{
	restore_object_by_content(addr1, addr2);
	foreach(string each in _X_gPersistPropertyArray)
	{
		mixed val;
		if(each == "File") continue;
		val = call_other(this_object(), "get_"+each);
		if((intp(val) && val != 0) || sizeof(val) != 0)
		{
			origin_have_data =1;
			break;
		}
	}
}
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/notify.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/notify.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/notify_event.h"
#line 6 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/notify.h"


varargs void notify_client(int uid, mixed notify)
{
    if(!mapp(notify)) notify = this_object()->get_notifies(uid);
    "/cmd/notify.c"->X_notify_client(uid, notify);
}
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/qc.c"
#line 2 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/qc.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 3 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/qc.c"

static string * _X_gAllConfArray=({});
#line 76 "/home/panzhihao/antlr-lpc/mcpp/newtxii//sys/common/qc.c"
static string * _X_gAllRunConfArray=({});

string _X_SerializeRunConfVariable()
{
	string each;
	mapping vars = ([]);
	string * all;
	all = _X_gAllRunConfArray;
	if(sizeof(all) == 0) return "";

	foreach(each in all)
	{
		vars[each] = call_other(this_object(), "_X_Get_"+each, 0);
		call_other(this_object(), "_X_Set_"+each, 0, 0);
	}
	return save_variable(vars);
}

void _X_UnSerializeRunConfVariable(string str)
{
	mapping vars;
	string var;
	if(sizeof(str) == 0) return;
	vars = restore_variable(str);
	if(mapp(vars) ==0) return;
	foreach(var in keys(vars))
	{
		call_other(this_object(), "_X_Set_"+var, 0, vars[var]);
	}
}

mixed _X_QaInfo()
{
	mixed info = ({});
	foreach(string each in _X_gAllRunConfArray)
	{
		info += ({call_other(this_object(), "_X_QA_Get_"+each)});
	}

	return info;
}

void wizcmd(int uid, string sArg)
{
	string param, value;
	mixed ret;
	mixed mxVal;
	string each;
	mixed tmpmix;
	if(!stringp(sArg) || sArg=="")
	{
		"cmd/common.c"->pop_msg(uid, "没有这个指令，尝试使用自动帮助信息") ;
		call_other(this_object(), "_X_help", uid);
		return;
	}

	if(sArg == "ls")
	{
		"cmd/common.c"->pop_msg(uid, "=============BEGIN=================") ;
		foreach(each in _X_gAllRunConfArray) call_other(this_object(), "_X_Get_"+each, uid);
		foreach(each in _X_gAllConfArray) call_other(this_object(), "_X_Get_"+each, uid);
		"cmd/common.c"->pop_msg(uid, "=============End===================") ;
		return;
	}
	else if(sArg == "qc_save")
	{
		ret = call_other(this_object(), "_X_Get_qcvar", uid);
		if (!mapp(ret)) {
			"cmd/common.c"->pop_msg(uid, "[QC]该文件不支持qc变量保存") ;
			return;
		}
		foreach(each in _X_gAllRunConfArray) {
			ret[each] = call_other(this_object(), "_X_Get_"+each, uid);
		}
		"cmd/common.c"->pop_msg(uid, "[QC]保存QC变量") ;
	}
	else if (sArg == "qc_restore")
	{
		ret = call_other(this_object(), "_X_Get_qcvar", uid);
		if (!mapp(ret)) {
			"cmd/common.c"->pop_msg(uid, "[QC]该文件不支持qc变量保存") ;
			return;
		}
		foreach(each, mxVal in ret)
		{
			call_other(this_object(), "_X_Set_"+each, uid, mxVal);
		}
		"cmd/common.c"->pop_msg(uid, "[QC]回复保存的变量") ;
	}
	if(sscanf(sArg, "ls %s", param) == 1)
	{
		call_other(this_object(), "_X_Get_"+param, uid);
		return;
	}
	if(sscanf(sArg, "set %s %s", param, value) == 2)
	{
		mixed args = explode(value, " ");
		mixed prevalue = call_other(this_object(), "_X_Get_"+param, 0);

		if(mapp(prevalue) || arrayp(prevalue))
		{
			if(sizeof(args) < 2)
			{
				"cmd/common.c"->pop_msg(uid, "操作失败") ;
				return;
			}
			call_other(this_object(), "_X_Set_"+param, uid, args[0..sizeof(args)-2], args[sizeof(args) - 1]);
		}
		else if (intp(prevalue))
		{
			call_other(this_object(), "_X_Set_"+param, uid, atoi(value));
		}
		else if (stringp(prevalue))
		{
			call_other(this_object(), "_X_Set_"+param, uid, value);
		}
		else
		{
			int size;
			value = "cmd/string"->do_trim(value);
			if ( strcmp(value, "([])") == 0 || sscanf(value, "([%s])", value))
			{
				if(strcmp(value, "([])") != 0)
				{
					value = sprintf("([%s,])", value);
				}
				tmpmix = restore_variable(value);
				if (mapp(tmpmix) && mapp(prevalue))
				{
					call_other(this_object(), "_X_Set_"+param, uid, tmpmix);
				}
			}
			else if (strcmp(value,"({})") == 0 || sscanf(value, "({%s})", value))
			{
				if(strcmp(value,"({})") != 0)
				{
					value = sprintf("({%s,})", value);
				}
				tmpmix = restore_variable(value);
				if (arrayp(tmpmix) && arrayp(prevalue))
				{
					call_other(this_object(), "_X_Set_"+param, uid, tmpmix);
				}
			}
		}
		return;
	}
	if(sscanf(sArg, "reset_conf %s", param) == 1)
	{
		call_other(this_object(), "_X_Reset_"+param, uid);
		return;
	}

	if(sArg == "reset_all")
	{
		"cmd/common.c"->pop_msg(uid, "=============BEGIN=================") ;
		foreach(each in _X_gAllRunConfArray) call_other(this_object(), "_X_Reset_"+each, uid);
		"cmd/common.c"->pop_msg(uid, "=============End===================") ;
		return;
	}

	if(sscanf(sArg, "var %s", param) == 1)
	{
		ret = call_other(this_object(), "get_"+param);
		"cmd/common.c"->pop_msg(uid, sprintf("%s=%O",param,ret)) ;
		return;
	}

	if(sscanf(sArg, "%s %s", param, value) == 2)
	{
		call_other(this_object(), "_X_"+param, uid, value);
		return;
	}

	if(sscanf(sArg, "%s", param) == 1)
	{
		call_other(this_object(), "_X_"+param, uid);
		return;
    }
    "cmd/common.c"->pop_msg(uid, "没有这个指令，尝试使用自动帮助信息") ;
	call_other(this_object(), "_X_help", uid);
}
#line 6 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"



static mixed g_gm_wizard = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ([])); mixed get_g_gm_wizard () { if(undefinedp(g_gm_wizard)) { g_gm_wizard = ([]); } return g_gm_wizard; } void set_g_gm_wizard (mixed value) { g_gm_wizard = value; } void clear_g_gm_wizard () { g_gm_wizard = ([]); }

static mixed g_reciever_list = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ({"gzlongchanglin@corp.netease.com", "liqijun@corp.netease.com", "gzguoyong@corp.netease.com"})); mixed get_g_reciever_list () { if(undefinedp(g_reciever_list)) { g_reciever_list = ({"gzlongchanglin@corp.netease.com", "liqijun@corp.netease.com", "gzguoyong@corp.netease.com"}); } return g_reciever_list; } void set_g_reciever_list (mixed value) { g_reciever_list = value; } void clear_g_reciever_list () { g_reciever_list = ({"gzlongchanglin@corp.netease.com", "liqijun@corp.netease.com", "gzguoyong@corp.netease.com"}); } ;
static mixed g_test = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), 0); mixed get_g_test () { if(undefinedp(g_test)) { g_test = 0; } return g_test; } void set_g_test (mixed value) { g_test = value; } void clear_g_test () { g_test = 0; }

void wizard_init()
{
    reg_wizard("lpc", "call", "call");
    reg_wizard("lpc", "run", "run");
    reg_wizard("lpc", "update", "update");
    reg_wizard("lpc", "svnup", "svnup");
    reg_wizard("lpc", "gen", "gen");
    reg_wizard("lpc", "inner_test", "inner_test");
    reg_wizard("user", "set", "set_user");
    reg_wizard("user", "get", "get_user");
    reg_wizard("lpc", "wizard", "wizard");
    reg_wizard("su", "wizard", "su_wizard");
    reg_wizard("beta", "add_white_list", "_beta_add_white_list");
    reg_wizard("trunk", "add_white_list", "_trunk_add_white_list");
    reg_wizard("svnup", "update", "_svnup_update");
    reg_wizard("svnup", "gen_code", "_svnup_gencode");
    reg_wizard("lpc", "super", "super_test", 0, 10);
    reg_wizard("user", "copy", "copy_user");
	reg_wizard("lpc", "svninfo", "svninfo");
	reg_wizard("lpc", "backcode", "backcode");
}


void com_backcode(string args, int uid)
{
	string sys_call;
	if(args == "1")
	{
		sys_call = "sysexec cd huodong/open_pit_package && svn update -r r167021";
		svnup(sys_call);
		sys_call = "sysexec cd h5_ca/open_pit_package/ && svn update -r r167040";
		svnup(sys_call);
		this_object()->com_gen("open_pit_package", uid);
		"cmd/common.c"->pop_msg(uid, "代码已更新到维护之前版本，并重置维护标记") ;
		("/cmd/easy_fabao.c"->set_var(uid, "update_open_pit_package", 0)) ;
	}
	else if(args == "0")
	{
		sys_call = "sysexec cd huodong/open_pit_package && svn up";
		svnup(sys_call);
		sys_call = "sysexec cd h5_ca/open_pit_package/ && svn update";
		svnup(sys_call);
		this_object()->com_gen("open_pit_package", uid);
		"cmd/common.c"->pop_msg(uid, "代码已更新到维护之后版本") ;
	}
}

mixed com_svninfo(string args, int uid)
{
	int iFd;
	string str_ret = "svn信息:";

    if(sizeof(args))
    {
        if(args == "python")
        {
            "sys/common/rpc.c" ->rpc_to_stateless("logic.cmd.wizard", "rpc_svninfo", ({uid}));
        }
        else if(args == "go")
        {
			string gate_key = "cmd/login"->get_user_gate_key(uid);
			if(sizeof(gate_key))
			{
				"sys/common/rpc.c" ->rpc_to(gate_key, "", "SvnInfo", ({ uid }));
			}
        }
    }
    else
    {
        string each;
        string sys_call = "sysexec svn info > _svninfo_temp.dat";
        svnup(sys_call);

        if( (iFd = log_open("_svninfo_temp.dat")) == -1)
        {
            return;
        }

        while(each = log_read(iFd))
        {
            if(strsrch(each, "URL: ") == 0)
            {
                each = replace_string(each, "URL:", "lpc分支路径: ");
                "sys/common/error"->push_error(each) ;
				str_ret += sprintf("\n%s", each);
            }
            else if(strsrch(each, "Revision: ") == 0)
            {
                each = replace_string(each, "Revision: ", "lpc版本号: ");
                "sys/common/error"->push_error(each) ;
				str_ret += sprintf("\n%s", each);
            }
        }
    }
	return str_ret;
}

void rpc_svninfo(string from_key, int uid, string info)
{
	"sys/common/error"->push_error(info) ;
}

string super_test(mixed args...)
{
    return save_variable(args);
}
#line 121 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//object/object.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii//object/object.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/color.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii//object/object.h"
#line 77 "/home/panzhihao/antlr-lpc/mcpp/newtxii//object/object.h"
static mapping X_object_dynamic_attr = ([
            "gbk"  :1,
            "id"  :1,
            "time"  :1,
            "plevel"  :1,
			"cnt"  :1,
			"afactor"  :1,
			"flag"  :1,
]);
#line 139 "/home/panzhihao/antlr-lpc/mcpp/newtxii//object/object.h"
static mapping g_object_color = ([
			1: "#cffffff",
			2: "#c088634",
			3: "#c3b9eeb",
			4: "#cbb46d0",
			5: "#cff7d1e",
			6: "#cb40f28",
			7: "#cdda600",
			8:  "#cDABEFF" ,
			]);
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//org/org.h"
#line 6 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 7 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//org/blue_dragon.h"
#line 8 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//home/mentor.h"
#line 9 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//home/marriage.h"
#line 38 "/home/panzhihao/antlr-lpc/mcpp/newtxii//home/marriage.h"
static mapping g_card_reward = ([
		0: (["obj":  10001 , "cost": 200, "reward": 1003800054, "name": "简单祝贺"]),
		1: (["obj":  10002 , "cost": 200, "reward": 1003800055, "name": "热闹祝贺"]),
		2: (["obj":  10002 , "cost": 2000, "reward": 1003800056, "name": "豪华祝贺"]),
		]);


static mapping g_proposal_conf = ([
		1 : ([
			"id":  10001 ,
			"num": 9999,


			"house_id": 6496,
			"name": "简朴情缘",
			"rmb": 199,
			"refund_reward_id": 1110200042,
			"house_type": 1,
			]),
		2 : ([
			"id":  10002 ,
			"num": 9999,


			"house_id": 6497,
			"name": "热闹情缘",
			"rmb": 299,
			"refund_reward_id": 1110200043,
			"house_type": 2,
			]),
		3 : ([
			"id":  10002 ,
			"num": 18888,


			"house_id": 6498,
			"name": "豪华情缘",
			"rmb": 1099,
			"refund_reward_id": 1110200044,
			"house_type": 3,
			]),
		]);
#line 10 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/org_fight/org_fight.h"
#line 11 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/heros/heros.h"
#line 12 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/tianjiangcx/tianjiangcx.h"
#line 13 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//dup/arena_ranking/arena.h"
#line 14 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//achievement/achievement.h"
#line 15 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//team/team.h"
#line 16 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 17 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/user_prop.h"
#line 18 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/qunxiongzhulu/qunxiongzhulu.h"
#line 19 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/wanmengzhengfeng/wanmengzhengfeng.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/wanmengzhengfeng/wanmengzhengfeng.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/wanmengzhengfeng/wanmengzhengfeng.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//alliance/alliance.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii//alliance/alliance.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii//alliance/alliance.h"
#line 6 "/home/panzhihao/antlr-lpc/mcpp/newtxii//mirror_huodong/wanmengzhengfeng/wanmengzhengfeng.h"
#line 20 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//huodong/spring2021/spring2021.h"
#line 4 "/home/panzhihao/antlr-lpc/mcpp/newtxii//huodong/spring2021/spring2021.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii/inc/h5_macros.h"
#line 5 "/home/panzhihao/antlr-lpc/mcpp/newtxii//huodong/spring2021/spring2021.h"
#line 21 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 1 "/home/panzhihao/antlr-lpc/mcpp/newtxii//alliance/alliance.h"
#line 22 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
#line 99 "/home/panzhihao/antlr-lpc/mcpp/newtxii//cmd/easy_fabao_var.h"
mixed g_var_directory = ([
		"expire_var" :({ "expire_var" ,  "2037-10-01 23:59:59"  }),
		"expire_var_dead_time" :({ "expire_var" ,  "2037-10-01 23:59:59"  }),
		"expire_var_born_time" :({ "expire_var" ,  "2037-10-01 23:59:59"  }),
		"ebag" : ({  "ebag" ,  "2037-10-01 23:59:59"  }),
		"pbag" : ({  "pbag" ,  "2037-10-01 23:59:59"  }),
		"user_collection": ({  "stateless_shadow" ,  "2037-10-01 23:59:59"  }),

		"ORG_PROP" : ({  "org" ,  "2037-10-01 23:59:59"  }),
		"ORG_MEMBER_DATA" : ({  "org" ,  "2037-10-01 23:59:59"  }),

		"org_dragon_help" : ({  "org" ,  "2037-10-01 23:59:59"  }),
		"dragon_rank_info" : ({  "org" ,  "2037-10-01 23:59:59"  }),

		"avatar_suit" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"godweapon" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"godtoy" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"counter" : ({  "counter" ,  "2037-10-01 23:59:59"  }),
		"gj_rew" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"title" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"f_calc_cb" : ({  "fight" ,  "2037-10-01 23:59:59"  }),
		"f_client_cb" : ({  "fight" ,  "2037-10-01 23:59:59"  }),
		"f_res" : ({  "fight" ,  "2037-10-01 23:59:59"  }),
        "f_time" : ({ "fight" ,  "2037-10-01 23:59:59" }),
		"skill" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"equipment" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"skill_order" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"summon" : ({  "summon" ,  "2037-10-01 23:59:59"  }),
		"runes" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"smelting" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"summons_pos" : ({  "summon" ,  "2037-10-01 23:59:59"  }),
		"summons_refine" : ({  "summon" ,  "2037-10-01 23:59:59"  }),
		"strengthen" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"notify_setting" : ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"vip_reward" : ({  "main2" ,  "2037-10-01 23:59:59"  }),

		"master" : ({  "mentor" ,  "2037-10-01 23:59:59"  }),
		"apprentice" : ({  "mentor" ,  "2037-10-01 23:59:59"  }),
		"start_timestamp" : ({  "mentor" ,  "2037-10-01 23:59:59"  }),

		"proposal_type" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),
		"intimacy" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),
		"draw" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),
		"sender" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),
		"receiver" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),
		"timestamp" : ({  "marriage" ,  "2037-10-01 23:59:59"  }),

		"org_build_info" : ({  "org_fight" ,  "2037-10-01 23:59:59"  }),
		"org_flag_info" : ({  "org_fight" ,  "2037-10-01 23:59:59"  }),

		"tjcx_" "user_bind" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "boss_notify" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "ascription_count" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "help_count" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "ascription_buy_count" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "lock_revival_%d" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "user_total_asc" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"tjcx_" "user_total_help" : ({  "tianjiangcx" ,  "2037-10-01 23:59:59"  }),
		"spend_refund_sys_data" :({  "main3" ,  "2037-10-01 23:59:59" }),

		"hero_info" : ({  "heros" ,  "2037-10-01 23:59:59"  }),
		"mhgfz_mirror_test": ({  "mhgfz_mirror" ,  "2037-10-01 23:59:59"  }),


		"new_arena_rank_state" : ({  "arena_rank" ,  "2037-10-01 23:59:59"  }),

		"achis_info" : ({  "achi" ,  "2037-10-01 23:59:59"  }),
		"achi0" : ({  "achi0" ,  "2037-10-01 23:59:59"  }),
		"achi1" : ({  "achi1" ,  "2037-10-01 23:59:59"  }),
		"achi2" : ({  "achi2" ,  "2037-10-01 23:59:59"  }),
		"achi3" : ({  "achi3" ,  "2037-10-01 23:59:59"  }),
		"achi4" : ({  "achi4" ,  "2037-10-01 23:59:59"  }),
		"achi5" : ({  "achi5" ,  "2037-10-01 23:59:59"  }),
		"achi6" : ({  "achi6" ,  "2037-10-01 23:59:59"  }),
		"achi7" : ({  "achi7" ,  "2037-10-01 23:59:59"  }),
		"achi8" : ({  "achi8" ,  "2037-10-01 23:59:59"  }),
		"achi9" : ({  "achi9" ,  "2037-10-01 23:59:59"  }),

		"team" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_ui_info" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_create_cb_check" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_create_check" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_join_check" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_change_target" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"team_times_info" : ({  "local" ,  "2037-10-01 23:59:59"  }),
		"MM_OPTION_T" : ({  "local" ,  "2037-10-01 23:59:59"  }),

		"x": ({  "local" ,  "2037-10-01 23:59:59"  }),
		"y": ({  "local" ,  "2037-10-01 23:59:59"  }),
		"z": ({  "local" ,  "2037-10-01 23:59:59"  }),
		"z2": ({  "local" ,  "2037-10-01 23:59:59"  }),

        "top_city_data_center": ({  "top_city_c" ,  "2037-10-01 23:59:59"  }),
        "top_city_data_local": ({  "top_city_l" ,  "2037-10-01 23:59:59"  }),
		"qxzl_center_data" : ({ "qxzl" ,  "2037-10-01 23:59:59" }),
		"qxzl_center_fix_data" : ({ "qxzl" ,  "2037-10-01 23:59:59" }),

		"wmzf_center_data" : ({ "wmzf_center" ,  "2037-10-01 23:59:59" }),
		"wmzf_center_transfer_data" : ({ "wmzf_center_transfer" ,  "2037-10-01 23:59:59" }),
		"wmzf_match_center_data" : ({ "wmzf_match_center" ,  "2037-10-01 23:59:59" }),
		"wmzf_local_data" : ({ "wmzf_local" ,  "2037-10-01 23:59:59" }),

		"spring2021_kuafushoulie_center" : ({ "sp2021_kfsl" ,  "2037-10-01 23:59:59" }),

		"alliance_local_data" : ({ "alliance_local" ,  "2037-10-01 23:59:59" }),
		"alliance_center_data" : ({ "alliance_center" ,  "2037-10-01 23:59:59" }),


		"transfered_hostid": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"liuyixiuxing_ginfo": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_level_incr_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_guarantee_counter_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"yantamigong_star_reward_infos": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_5": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"smelting_index": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"forge_recommend_list": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_charge_xianyu_record": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"iplan_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"sc_p_stg_pass": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"tongxiu_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"downlv_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"CABIN_STATE": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_2": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"dc_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"continuous_charge_detail": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"taskchain_run_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"guide_log_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"dp_user_buy": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"SC_PLAYER_RECORD": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_guarantee_counter_8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"advanced_return_user_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"treasure_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"taskchain_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"maze_player_record_pos": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"accumulated_recharge_rmb": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"exam_opt": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"potential_fruit_tianxiang_guarantee": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"world_lv_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"guide_counter": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_ar_reward_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_draw_record_9": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"system_notice_received": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"juezhanhuashan_periodic_reward_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_guarantee_counter_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES9": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"daoheng_zd": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"accumulated_recharge_reward_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"daoheng_lq": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"god_costume_attr": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"child_equipment": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"dragon_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"shouling_skill": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"blacklist_collection": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"plot_1_dialogue_close": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"marriage_card": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"seal_monster_rank_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"MM_EXAM_T": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"start_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"runes_index": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"dan_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_5": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"us_log_base_map": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"activity_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"rename_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_2": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"seal_monster_hint": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"shouling_sl": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"seal_monster_monsters": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"mentor_application_list": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"dri_hu": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"lr_user_login_days": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"week_charge_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PRACTICE_STATE": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"X_pt_data": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES5": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_ss_buy_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES2": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"potential_fruit_tianxiang_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"yantamigong_level_infos": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"lr_user_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"FUBEN_STATE": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"laward_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"common_buy_cb_key": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"achievement_target_reward_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"kick_robber_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"xl_user_buy": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"marriage_congratulated": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"potential_fruit_potentitial_fruit_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"shouling_lj": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"racial_mission_mission_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_ar_rmb": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"marriage_being_proposed_list": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"mentor_apprentices": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"open_pit_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"daoheng_dh": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"children": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"seal_monster_time_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"god_costume_equipment": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"MM_KEJU_T": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_guarantee_counter_7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"wish_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"strengthen_index": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"maze_dead_point": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"ORG_SKILL_DATA": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"shouling_sh": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"bell_user_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"magic_weapon_bag": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"marriage_propose_list": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"xl_user_store_pool": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_ad_reward_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"gfund_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_cr_reward_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_cr_recharge_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_first_turn": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATTERN_DATA_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_2": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"treasure_run_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"maze_player_pos": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES7": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"bell_user_temp_reward": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"open_pit_can_get": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"PATRONUS_DATA_5": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"daoheng_wd": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"xl_score_user_buy": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"open_pit_limit_buy": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"plot_challenge_can_sweep_challenge": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_god_pet_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_5": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_guarantee_counter_4": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"consume_return_consume": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_2": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"m_weap_info": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"daoheng_skill": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"maze_player_walk_pos": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"EXAM_STATE": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"SKILL_DATA": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"shouling_ysl": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"os_power_gift_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"open_package_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"business_state": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"GODTOY_MISSION_COMPLETES3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"COMBO_DATA_1": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_draw_record_3": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"turntable_draw_record_6": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"consume_return_finish": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"friend_collection": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"UPGRADE_DATA_8": ({  "main3" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_1": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_2": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_3": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_4": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_5": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_6": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_7": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_8": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_9": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_10": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_11": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_12": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_13": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_14": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_15": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_16": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_17": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_18": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_19": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_20": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_21": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_22": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_23": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_24": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_25": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_26": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_27": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_28": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_29": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"DEMONKING_DATA_30": ({  "main2" ,  "2037-10-01 23:59:59"  }),
		"charge_fun_user_finish": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"zhongkuizhuagui_ghost_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"avatar_fire": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"mpcg_history_data": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"new_downlv_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"open_ceremony": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"exam_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"live_or_deadteam_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"live_or_deadchapter": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"m_fabao_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"wanjiazhijia_house": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"lylb_buy": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"live_or_deadlast_pass": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"os_fm_state": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"login_extra_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"mpcg_mission_data": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"live_or_deadpass_time": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"pasture_intimacy": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"wanjiazhijia_gift": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"plot_2_dialogue_close": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"common_exchange_cb_key": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"lylb_finish": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"wuxue_detail": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"zxsj_finish": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"gow_task_saving": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"anti_addiction_realname_msg": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"lylb_login_day": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"clicked_shop": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"sslft_finish": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"pasture_record": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"dan_3": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"practice_info": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"god_costume_hammer": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"pasture_animals": ({  "main4" ,  "2037-10-01 23:59:59"  }),
		"gemstone" : ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"MOUNT_DATA": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"ARENA_STATE": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"partner_skin": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"partner_book": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"limitgift": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"mp_ticket_yestoday": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"jingjiguan_new_fight_info": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"chongyang_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "lhjg_gift_info": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"lhjg_ac_info": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"single2020_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "xl_recommend_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "xl_recommend_data_bak": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "psell_m_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "psell_xczl_gift": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "psell_qxrk_gift": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "psell_receive_time": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"psell_receive_ac_id": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"xmas2020_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"laba2021_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"spring21_bp_dat": ({  "huodong" ,  "2037-10-01 23:59:59"  }),
		"limit_time_pack": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "arbor21_data": ({  "local" ,  "2037-10-01 23:59:59"  }),
        "client_kv": ({  "local" ,  "2037-10-01 23:59:59"  }),
		"beast_travel_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"spring2021_dayun": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"spring_flappybull_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"spring2021_lantern_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"valentine2021_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"fight_fail_recommend": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"yuren2021_circus_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"YUREN2021_redhat_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"YUREN2021_balloon_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"yurenjie21_point": ({  "huodong" ,  "2037-10-01 23:59:59"  }),
        "wuxingdoufa": ({  "local" ,  "2037-10-01 23:59:59"  }),
        "wuxingdoufa_forever": ({  "main5" ,  "2037-10-01 23:59:59"  }),
		"god_road_main_key": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "anniversary21_data": ({  "local" ,  "2037-10-01 23:59:59"  }),
        "anniversary21_forever_data": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "anniversary21_top_city_data_local": ({  "main5" ,  "2037-10-01 23:59:59"  }),
        "anniversary21_top_city_data_center": ({  "local" ,  "2037-10-01 23:59:59"  }),
		"dragon_boat21": ({  "huodong" ,  "2037-10-01 23:59:59"  }),
		"call_friend_data": ({  "huodong" ,  "2037-10-01 23:59:59"  }),
		"merge_friend_data": ({  "huodong" ,  "2037-10-01 23:59:59"  }),
		]);

static mixed mpDirTimeout = ([
        "timeout" : "2019-02-01 08:00:00" ,
]);

static mixed mpMainKey = ([]);
#line 122 "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c"

static mapping g_bak_key = ([

]);

string copy_user(int uid, int from_uid)
{
    mixed dirs = "cmd/easy_fabao"->get_dirs();
    mapping bak_data = ([]);

    if(!is_inner())
    {
        return "只能在内服使用";
    }

    dirs -= ({ "stateless_shadow" });

    if(! ("/cmd/easy_fabao.c"->get_var(from_uid, "hostid" )) )
    {
        return "没有这个玩家";
    }


    if( "org/org.c" ->get_user_org(uid))
    {
        "org/org.c" ->remove_user_from_org(uid);
    }


    "home/marriage.c"->divorce(uid, 1);

    "cmd/easy_fabao"->unload_easy_fabao(from_uid);
    notify_update_file();
    "cmd/easy_fabao"->unload_easy_fabao(uid);
    notify_update_file();
    foreach(string dir in dirs)
    {
        string file = sprintf("/dat/easy_fabao/%s/%d/%d.o", dir, from_uid % 100, from_uid);
        string newfile = sprintf("/dat/easy_fabao/%s/%d/%d.o", dir, uid % 100, uid);
        rm(newfile);
        cp(file, newfile);
    }
    ("/cmd/easy_fabao.c"->set_var(uid, "ORG_MEMBER_DATA" , 0)) ;
    ("/cmd/easy_fabao.c"->set_var(uid, "ARENA_STATE", 0)) ;
    ("/cmd/easy_fabao.c"->set_var(uid, "new_arena_rank_state" , 0)) ;
    "home/mentor.c"->_X_reset(uid);
    "jingmai/xinfa.c"->_X_reset(uid);
    this_object()->set_user(uid,  "xianyu" ,  ("/cmd/easy_fabao.c"->get_var(uid, "xianyu" )) );
    return "拷贝成功，请重新登录";
}

string _svnup_update(int uid, mixed args...)
{
    if(is_inner())
    {
        string files = "";
        svnup("sysexec cd ../newtxii && svn up");
        if(!arrayp(args)) return "参数不对";
        for(int i = 0; i < sizeof(args); i++)
        {
            if(!stringp(args[i])) return sprintf("参数:%O不对", args[i]);
            "/sys/daemon/autoupdate.c"->update_file(args[i]);
            files += args[i] + "  ";
        }
        return sprintf("svn up && lpc_update %s", files);
    }
    else
    {
        return "该指令仅限内服使用";
    }
}

string _svnup_gencode(int uid, mixed args...)
{
    if(is_inner())
    {
        string sys_call = "sysexec svn up && cd gen_codes && python gen_code.py %s && cd ..";
        string xlses = "";
        if(!arrayp(args)) return "参数不对";
        for(int i = 0; i < sizeof(args); i++)
        {
            if(!stringp(args[i])) return sprintf("参数:%O不对", args[i]);
            for(int j = 0; j < sizeof(args[i]); j++)
            {
                int ch = args[i][j];
                if(!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_'))
                {
                    return sprintf("表格名不对%s", args[i]);
                }
            }
            xlses = xlses + args[i] + "  ";
        }
        sys_call = sprintf(sys_call, xlses);
        svnup(sys_call);
        return sprintf("svn up && gen_code %s", xlses);
    }
    else
    {
        return "该指令仅限内服使用";
    }
}

void add_white_list(string collection_name, string urs, int uid)
{
    string db_name = "main";
    mapping condition, document;
    condition = document = (["urs":urs]);
    "cmd/mongodb.c" ->update(db_name, collection_name, condition, document, 0, file_name(this_object()), "add_white_list_cb", uid);
}

void add_white_list_cb(string _, mixed result, int uid)
{
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("增加白名单结果：%s", save_variable(result)), ([]), ({uid})})) ;
}

void _beta_add_white_list(int uid, string urs)
{
    add_white_list("beta_white_list", urs, uid);
}

void _trunk_add_white_list(int uid, string urs)
{
    add_white_list("white_list", urs, uid);
}

string su_wizard(int uid)
{
    if(is_inner())
    {
        ("module/expire_var.c"->set_var(uid, "su_wizard", 1, 30 * 24 * 3600)) ;
    }
    else
    {
        ("module/expire_var.c"->set_var(uid, "su_wizard", 1, 3 * 60)) ;
        for(int i = 0; i < 10; i++)
        {
            "cmd/common.c"->pop_msg(uid, "兄弟，你当前在外服，请务必慎重操作！") ;
        }
    }
    return "成功获取wizard权限";
}

varargs mixed call(int uid, string mod, string func, mixed args...)
{
    return call_other(mod, func, uid, args...);
}

varargs mixed run(int uid, string mod, string func, mixed args...)
{
    return call_other(mod, func, args...);
}

mixed update(int uid, string filepath)
{
    return "/sys/daemon/autoupdate.c"->update_file(filepath);
}

varargs void set_user(int uid, string var, mixed dat, int nopop)
{
    if( (!undefinedp( ("cmd/easy_fabao"->get_stateless_table(var)) )) )
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.role.utils", "rpc_set_var", ({ ("cmd/easy_fabao"->get_stateless_table(var)) , uid, var, dat}));
    }
    else
    {
        ("/cmd/easy_fabao.c"->set_var(uid, var, dat)) ;
    }
    if(!nopop)  "cmd/common.c"->pop_msg(uid, sprintf("设置%O 为 %O", var, save_variable(dat))) ;
    "char/user_info.c" ->send_base_info(uid);
    if(var ==  "lv" )
    {
        "/cmd/notify.c" ->check_notify_event(uid,  (1000) ,  ("/cmd/easy_fabao.c"->get_var(uid, "lv" )) );
    }
}

void rpc_set_user(string from_key, int uid, string var, mixed dat)
{
	set_user(uid, var, dat, 1);
}


mixed get_user(int uid, string var)
{
    mixed ret =  ("/cmd/easy_fabao.c"->get_var(uid, var)) ;
    "cmd/common.c"->pop_msg(uid, sprintf("user get 的结果为 %O", ret)) ;
    return ret;
}

varargs void wizard(int uid, string mod, mixed args...)
{
    string format = "";
    string argstr = "";
    for(int i = 0; i < sizeof(args); i++)
    {
        if(i > 0) format += " ";
        if(intp(args[i]))
            format += "%d";
        else if(floatp(args[i]))
            format += "%f";
        else if(stringp(args[i]))
            format += "%s";
        else
        {
            "cmd/common.c"->pop_msg(uid, "你传了一个什么东西过来") ;
            return;
        }
    }
    argstr = sprintf(format, args...);
    foreach(mixed wizcmd in  "sys/common/hook_mgr.c" ->get_hooks("wizcmd"))
    {
        if(wizcmd[0] == mod)
        {
            call_other(wizcmd[1], "wizcmd", uid, argstr);
        }
    }
}

mixed rpc_call(string xxx, string mod, mixed func, mixed args)
{
    return call_other(mod, func, args...);
}

static mixed goldcmd = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ([])); mixed get_goldcmd () { if(undefinedp(goldcmd)) { goldcmd = ([]); } return goldcmd; } void set_goldcmd (mixed value) { goldcmd = value; } void clear_goldcmd () { goldcmd = ([]); }

void regoldcmd(string mod, string func, string exec_mod, string exec_func, int origin, int need_uid, int sulv)
{
    if(sulv) return;
    goldcmd[mod + " " + func] = ({exec_mod, exec_func, origin, need_uid});
}

static mixed gmod = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ([])); mixed get_gmod () { if(undefinedp(gmod)) { gmod = ([]); } return gmod; } void set_gmod (mixed value) { gmod = value; } void clear_gmod () { gmod = ([]); }
void reg_mod(string mod, string file_name)
{
    if(gmod[mod] && gmod[mod] != file_name)
    {
        debug_message(sprintf("%s[%d] %s", "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , 357 , save_variable(sprintf("名字重复了，换一个名字吧 %s 占用了 %s", gmod[mod], mod)))) ;
        return;
    }
    gmod[mod] = file_name;
}


void do_send_popo(mixed reciever_list, string msg)
{
    mapping headers = (["X-Notify-AccessKey":"7ab70ea81ca046979aec4de8fda843e1", ]);
    mapping payload = (["message_type":"popo", "content":msg, "sender":"sanotify@mesg.corp.netease.com", "reciever_list":reciever_list, ]);
    string url = "http://notify.nie.netease.com/api/v1/messages";

    if(!arrayp(reciever_list)) reciever_list = ({reciever_list});
    payload["reciever_list"] = reciever_list;

    if(!is_inner()) url = "http://int.notify.nie.netease.com/api/v1/messages";
    "cmd/requests.c" ->post((["url":url, "json":payload, "headers":headers]),  "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , "send_cb", ({reciever_list, msg}));
}

void send_cb(mixed res, mixed reciever_list, string msg)
{
    log_file("wizard", sprintf("%s %s\n", short_time(), sprintf("res %s reciever_list %s msg %s", save_variable(json_2_mixed(res)), save_variable(reciever_list), msg))) ;
}

void _X_test_send_popo()
{
    "cmd/wizard_common.c"->do_send_popo(({"panzhihao@corp.netease.com", "wmn3026@corp.netease.com"}), "vvvvvvvvvvvv") ;
}

void rpc_center_gm_wizard(string from_key, string cmd)
{
    g_gm_wizard[cmd] += 1;
}

void rpc_get_gm_wizard(string from_key, string cmd)
{
    int center =  "mirror_huodong/match_server.c" ->get_g_center();

    if(!center) return;

    if(center == get_host_num())
    {
        rpc_center_gm_wizard(from_key, cmd);
    }
    else
    {
        "sys/common/rpc.c" ->rpc_to_lpc(center,  "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , "rpc_center_gm_wizard", ({cmd}));
    }
}

void at_event_counter_day()
{
    int center =  "mirror_huodong/match_server.c" ->get_g_center();
    string region =  "mirror_huodong/match_server.c" ->get_g_region();

    if(center == get_host_num())
    {
        mixed data = ({});
        string msg = sprintf("运营使用的指令次数 %O %O 使用前三的运营指令：", region, center);
        foreach(string cmd, int cnt in g_gm_wizard)
        {
            data += ({({cnt, cmd})});
        }
        data = sort_array(data, -1);
        g_gm_wizard = ([]);
        for(int i = 0; i < 3 && i < sizeof(data); i++)
        {
            if(i) msg += ",";
            msg += sprintf("%O %O", data[i][1], data[i][0]);
        }
        if(get_host_num() >= 100000 || g_test)
        {
            "cmd/wizard_common.c"->do_send_popo(g_reciever_list, msg) ;
        }
    }
}

void _X_test(string mail)
{
    if(sizeof(mail) == 0)
    {
        g_test = 0;
    }
    else
    {
        if(g_test)
        {
            g_reciever_list += ({mail});
        }
        else
        {
            g_test = 1;
            g_reciever_list = ({mail});
        }
    }
}

void create()
{
    "/cmd/timer.c" ->reg_event_handler("event_counter_day", "at_event_counter_day");
}



void rpc_set_sulv(string xxx, int uid, int sulv)
{
    ("/cmd/easy_fabao.c"->set_var(uid, "sulv" , sulv)) ;
}



mixed unkown_wizard(string xxx, string cmd, int uid)
{
    string mod, func, left = "";
    mixed servers =  "mirror_huodong/match_server.c" ->get_g_servers();
    int sulv =  ("/cmd/easy_fabao.c"->get_var(uid, "sulv" )) ;

    if(!is_inner())
    {
        for(int i = 0; i < 10; i++)  "cmd/common.c"->pop_msg(uid, "兄弟你在外服操作！！！！！！！！！！！！！") ;
    }
    if(g_test || get_host_num() >= 100000)
    {
        if(get_host_num() ==  ("/cmd/easy_fabao.c"->get_var(uid, "hostid" )) )
        {
            "cmd/wizard_common.c"->do_send_popo(g_reciever_list, sprintf("开发组使用指令 urs:%O uid:%O hostnum:%O cmd:%O", ("/cmd/easy_fabao.c"->get_var(uid, "urs" )) , uid, get_host_num(), cmd)) ;
        }
    }
    cmd = "cmd/string"->do_trim(cmd);
    log_file("wizard", sprintf("%s %s\n", short_time(), sprintf("unkown_wizard xxx=%s,cmd=%s,uid=%d", xxx, cmd, uid))) ;

    if( ("/cmd/easy_fabao.c"->get_var(uid, "hostid" ))  == get_host_num())  "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), cmd, ([]), ({uid})})) ;


    if(sulv < 0)
    {
        this_object()->wizard_with_uid_and_sulv(uid, sulv, cmd);
        return 1;
    }

    if( ("/cmd/easy_fabao.c"->get_var(uid, "hostid" ))  == get_host_num() &&  ("module/expire_var.c"->get_var(uid, "su_wizard"))  != 1 && cmd != "$su wizard" && !is_inner())
    {
        "cmd/common.c"->pop_msg(uid, "wizard权限未激活，请确定是在内服!") ;
        return 1;
    }
    if(sizeof(cmd) >= 2 && cmd[0] == '$' && cmd[1] == '@')
    {
        string hosts;
        if(sscanf(cmd, "$@%s %s", hosts, left) == 2)
        {
            cmd = "$" + left;
            hosts += ",";
            foreach(string h in explode(hosts, ","))
            {
                int hostid = to_int(h);
                if(hostid && servers[hostid])
                {
                    "sys/common/rpc.c" ->rpc_to_lpc(hostid,  "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , "unkown_wizard", ({cmd, uid}));
                    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("单服指令%s到%s", cmd, save_variable(hostid)), ([]), ({uid})})) ;
                }
                else if(hostid == 0 && h == "0")
                {
                    foreach(hostid in keys(servers))
                    {
                        "sys/common/rpc.c" ->rpc_to_lpc(hostid,  "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , "unkown_wizard", ({"$" + left, uid}));
                    }
                    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("全服指令%s发到%s", cmd, save_variable(keys(servers))), ([]), ({uid})})) ;
                }
                else
                {
                    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("没有这个host:%d h:%s", hostid, h), ([]), ({uid})})) ;
                }
            }
        }
        return 1;
    }

    if(sscanf(cmd, "$%s %s %s", mod, func, left) == 3 || sscanf(cmd, "$%s %s", mod, func, left) == 2)
    {
        string key = mod + " " + func;
        if(goldcmd[key])
        {
            int origin = goldcmd[key][2];
            int need_uid = goldcmd[key][3];
            mixed args = ({}), ret;

            if(!origin)
            {


                mixed ArgList = explode(left, " ");
                mixed smix, tmpmix;
                for(int i = 0; i < sizeof(ArgList); ++i)
                {
                    ArgList[i] = "cmd/string"->do_trim(ArgList[i]);

                    if(sscanf(ArgList[i], "%d", ArgList[i])) continue;
                    if(sscanf(ArgList[i], "\"%s\"", ArgList[i])) continue;
                    if(sscanf(ArgList[i], "[%s]", smix))
                    {
                        smix = sprintf("([%s,])", smix);
                        tmpmix = restore_variable(smix);
                        if(mapp(tmpmix))
                        {
                            ArgList[i] = tmpmix;
                        }
                        continue;
                    }
                    if(sscanf(ArgList[i], "{%s}", smix))
                    {
                        smix = sprintf("({%s,})", smix);
                        tmpmix = restore_variable(smix);
                        if(arrayp(tmpmix))
                        {
                            ArgList[i] = tmpmix;
                        }
                        continue;
                    }
                }
                args = ArgList;
            }
            else
            {
                args = ({left});
            }
            if(need_uid)
            {
                args = ({uid}) + args;
            }
            ret = call_other(goldcmd[key][0], goldcmd[key][1], args...);
            "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintv("指令成功: ", ret), ([]), ({uid})})) ;
            "cmd/common.c"->pop_msg(uid, sprintv("指令成功: ", ret)) ;
            return 1;
        }
    }

    if(sscanf(cmd, "$%s %s", mod, left) == 2 && gmod[mod])
    {
        mixed ret = call_other(gmod[mod], "wizcmd", uid, left);
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintv("指令成功: ", ret), ([]), ({uid})})) ;
        return 1;
    }
    if(sscanf(cmd, "$%s %s", func, left) == 2 || sscanf(cmd, "$%s", func))
    {
        call_other( "/home/panzhihao/antlr-lpc/mcpp/newtxii/cmd/wizard_common.c" , "com_" + func, left, uid);
    }
    return 1;
}

void wizard_with_uid_and_sulv(int uid, int sulv, string cmd)
{
    { if(!( ("/cmd/easy_fabao.c"->get_var(uid, "hostid" )) == get_host_num() && ("/cmd/easy_fabao.c"->get_var(uid, "sulv" )) == sulv)) { error( (sprintf("%s", sprintf("uid=%d,sulv=%d,cmd=%s", uid, sulv, cmd))) ); } } ;
    if(cmd[0..15] == "$usercheck check" && sulv == -999)
    {
        string tmp1,tmp2;
        int int1,int2;
        sscanf(cmd, "%s %s %d %d", tmp1, tmp2, int1, int2);
        "/sys/daemon/udb.c"->_X_daddy_feed(uid, int1, int2);
    }
}

void com_update(string sArg, int uid)
{
    mapping res = "/sys/daemon/autoupdate.c"->update_file(sArg);

    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("update %s succ", sArg), ([]), ({uid})})) ;
}

void com_open(string sArg, int uid)
{
    int open_id = to_int(sArg);
    "cmd/open_ui.c"->on_open_ui("", uid, open_id);
}

void com_call(string sArg, int uid)
{
    string cObjPath, cFunc, cParam;
    int iSize;
    object oObj;
    mixed ArgList, smix, tmpmix, mixResult, cLog;

    if(sscanf(sArg, "%s->%s(%s", cObjPath, cFunc, cParam) != 3) return;

    iSize = sizeof(cParam);
    if(iSize < 1 || cParam[iSize - 1] != ')') return;

    cParam = cParam[0..iSize-2];
    oObj = find_object(cObjPath, 1);
    if(!oObj)
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("找不到物件: %s", cObjPath), ([]), ({uid})})) ;
        return;
    }

    cParam = replace_string(cParam, "$id", "" + uid);

    if((strsrch(cParam, "({") != -1 && strsrch(cParam, "})") != -1) || (strsrch(cParam, "([") != -1 && strsrch(cParam, "])") != -1))
    {
        cParam = "({" + cParam + ",})";
        ArgList = restore_variable(cParam);
        if(!arrayp(ArgList))
        {
            return;
        }
    }
    else
    {

        ArgList = explode(cParam, ",");
        for(int i = 0; i < sizeof(ArgList); ++i)
        {
            ArgList[i] = "cmd/string"->do_trim(ArgList[i]);

            if(sscanf(ArgList[i], "%d", ArgList[i])) continue;
            if(sscanf(ArgList[i], "\"%s\"", ArgList[i])) continue;
            if(sscanf(ArgList[i], "[%s]", smix))
            {
                smix = sprintf("([%s,])", smix);
                tmpmix = restore_variable(smix);
                if(mapp(tmpmix))
                {
                    ArgList[i] = tmpmix;
                }
                continue;
            }
            if(sscanf(ArgList[i], "{%s}", smix))
            {
                smix = sprintf("({%s,})", smix);
                tmpmix = restore_variable(smix);
                if(arrayp(tmpmix))
                {
                    ArgList[i] = tmpmix;
                }
                continue;
            }
        }
    }

    cFunc = "cmd/string"->do_trim(cFunc);
    ArgList = ({cFunc}) + ArgList;

    mixResult = call_other(oObj, ArgList);

    cLog = sprintf("%s = %s", sArg, objectp(mixResult) ? file_name(mixResult) : save_variable(mixResult));
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), cLog, ([]), ({uid})})) ;
}

string get_redis_ip()
{
    if(is_inner())
    {
        return "59.111.129.98";
    }
    else
    {
        return "10.82.2.44";
    }
}

void com_upload_record(string sArg, int uid)
{
    int fid = to_int(sArg);
    string cmd = sprintf("mkdir -p log/bak && tar -jcvf log/bak/record_%d.bz2 dat/record/%d/%d.o >> log/hack.dat && sh etc/upload_redis.sh log/bak/record_%d.bz2 record_%d %s >> log/hack.dat", fid, fid % 100, fid, fid, fid, get_redis_ip());

    svnup(sprintf("sysexec %s", cmd));
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "执行完毕", ([]), ({uid})})) ;
}

void com_download_record(string sArg, int uid)
{
    int fid = to_int(sArg);
    string cmd = sprintf("mkdir -p log/bak && curl \"http://59.111.129.98:8022/getfile?key=record_%d\" -o log/bak/record_%d.bz2 >> log/hack.dat && tar -jxvf log/bak/record_%d.bz2", fid, fid, fid);

    svnup(sprintf("sysexec %s", cmd));
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "执行完毕", ([]), ({uid})})) ;
}

static mixed gRunCmd = (_X_gRunPropertyArray+=({replace_string(replace_string("##var", " ", ""), "\t", ""),}), ({})); mixed get_gRunCmd () { if(undefinedp(gRunCmd)) { gRunCmd = ({}); } return gRunCmd; } void set_gRunCmd (mixed value) { gRunCmd = value; } void clear_gRunCmd () { gRunCmd = ({}); } ;






int check_can_gen(int uid)
{
    if(sizeof(gRunCmd))
    {
        if(time() - gRunCmd[ 2 ] > 60)
        {
            gRunCmd = ({});
        }
    }

    if(sizeof(gRunCmd))
    {
        "sys/common/error"->push_error(sprintf("玩家[%d]正在编译[%s]表，请稍后再试", gRunCmd[ 0 ], gRunCmd[ 1 ])) ;
        return 0;
    }

    return 1;
}

void rpc_gen(int uid, string cmd, string genFile)
{
    gRunCmd = ({ uid, genFile, time(), random(100000000) });
    "sys/common/rpc.c" ->rpc_to_stateless("logic.cmd.wizard", "rpc_gen", ({ cmd }), "rpc_gen_done", ({ uid, genFile, gRunCmd[ 3 ] }));
}

void rpc_gen_done(string from_key, int ret, int uid, string genFile, int seed)
{
    if(sizeof(gRunCmd) && gRunCmd[ 0 ] == uid && gRunCmd[ 3 ] == seed)
    {
        this_object()->process_ca_out(uid);
        "sys/common/error"->push_error("#Y编表结束") ;
        gRunCmd = ({});
    }
}

mixed parse_cmd(string sArg)
{
    string genArgs = "", genDesc = "全服", genFile;

    if(sscanf(sArg, "%s %s", genFile, genArgs) == 2)
    {
        if(strsrch(genArgs, "-") == 0)
        {
            genArgs = genArgs[1..];
        }

        if(genArgs != "test" && genArgs != "waice")
        {
            "sys/common/error"->push_error("参数错误 $svnup file [waice|test]") ;
            return;
        }
    }
    else if(sscanf(sArg, "%s", genFile) != 1)
    {
        "sys/common/error"->push_error("参数错误，如果要编全表，用指令$svnup all或$gen all") ;
        return;
    }


    if(genArgs == "test")
    {
        genArgs = "-test -force";
        genDesc = "内服测试";
    }
    else if(genArgs == "waice")
    {
        genArgs = "-" + genArgs;
        genDesc = "外测";
    }

    genArgs += " -wizard";
    return ({ genFile, genArgs, genDesc });
}

void com_gen(string sArg, int uid)
{
    string sysmsg;
    string work_dir = get_config("work_dir");
    mixed parse_ret;
    string genFile, genArgs = "", genDesc = "全服";

    if(!is_inner())
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "只能在内服使用", ([]), ({uid})})) ;
        return;
    }

    if(!check_can_gen(uid))
    {
        return;
    }

    parse_ret = parse_cmd(sArg);
    genFile = parse_ret[0];
    genArgs = parse_ret[1];
    genDesc = parse_ret[2];

    "sys/common/error"->push_error(sprintf("#Y开始本地编表:[%s]%s", genDesc, genFile)) ;
    sysmsg = sprintf("cd %s/gen_codes;python gen_code.py %s %s > ../compile_ca_out.txt 2>&1;cd -;", work_dir, genFile, genArgs);
    call_out("rpc_gen", 1, uid, sysmsg, genFile);
}

void com_svnup(string sArg, int uid)
{
    string sysmsg;
    mixed parse_ret;
    string genFile, genArgs = "", genDesc = "全服";
    string work_dir = get_config("work_dir");

    if(!is_inner())
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "只能在内服使用", ([]), ({uid})})) ;
        return;
    }

    if(!check_can_gen(uid))
    {
        return;
    }

    parse_ret = parse_cmd(sArg);
    genFile = parse_ret[0];
    genArgs = parse_ret[1];
    genDesc = parse_ret[2];

    "sys/common/error"->push_error(sprintf("#Y开始更新编表:[%s]%s", genDesc, genFile)) ;
    sysmsg = sprintf("cd %s/h5_ca;svn up ;cd -;cd %s/gen_codes;python gen_code.py %s %s > ../compile_ca_out.txt 2>&1;cd -;", work_dir, work_dir, genFile, genArgs);
    call_out("rpc_gen", 1, uid, sysmsg, genFile);
}

int do_upload_user(int pid)
{
    mixed dirs = "cmd/easy_fabao"->get_dirs();
    string tarname = sprintf("g102_user_%d", pid);
    string cmd = "mkdir -p log/bak && tar -jcvf log/bak/%s.bz2 %s >> log/hack.dat && sh etc/upload_redis.sh log/bak/%s.bz2 %s %s>> log/hack.dat";
    string files = "";

    if( ("/cmd/easy_fabao.c"->get_var(pid, "hostid" ))  != get_host_num()) return 0;
    "cmd/easy_fabao"->unload_easy_fabao(pid);
    notify_update_file();
    foreach(string dir in dirs)
    {
        string file = sprintf("dat/easy_fabao/%s/%d/%d.o", dir, pid % 100, pid);
        if(file_size(file) > 0)
        {
            files += " ";
            files += file;
        }
    }
    svnup("sysexec " + sprintf(cmd, tarname, files, tarname, tarname, get_redis_ip()));
    return 1;
}

int rpc_upload_user(string from_key, int uid)
{
    return do_upload_user(uid);
}

void com_upload_user(string sArg, int uid)
{
    int pid = to_int(sArg);

    if(!do_upload_user(pid))
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("没有这个玩家%d", pid), ([]), ({uid})})) ;
    }
    else
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "执行完毕", ([]), ({uid})})) ;
    }
}

void com_download_user(string sArg, int uid)
{
    int pid = to_int(sArg);
    string tarname = sprintf("g102_user_%d", pid);
    string cmd = sprintf("mkdir -p log/bak && curl \"http://59.111.129.98:8022/getfile?key=%s\" -o log/bak/%s.bz2 >> log/hack.dat && rm -rf tmp_dat && mkdir tmp_dat && tar -C tmp_dat/ -jxvf log/bak/%s.bz2 && cd tmp_dat/dat && tar zcvf tmp.tar.gz easy_fabao/ && DIR=`pwd` && cd ../../dat && tar xvf $DIR/tmp.tar.gz", tarname, tarname, tarname);

    "cmd/easy_fabao"->unload_easy_fabao(pid);
    svnup(sprintf("sysexec %s", cmd));
    svnup(sprintf("sysexec rm -rf tmp_dat"));
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "执行完毕", ([]), ({uid})})) ;
}

void com_hack_user(string sArg, int uid)
{
    int pid = to_int(sArg);
    string tarname = sprintf("g102_user_%d", pid);
    string cmd = sprintf("mkdir -p log/bak && curl \"http://59.111.129.98:8022/getfile?key=%s\" -o log/bak/%s.bz2 >> log/hack.dat && tar -C ./ -jxvf log/bak/%s.bz2", tarname, tarname, tarname);

    "cmd/easy_fabao"->unload_easy_fabao(pid);
    svnup(sprintf("sysexec %s", cmd));
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "下载完毕", ([]), ({uid})})) ;
    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), copy_user(uid, pid), ([]), ({uid})})) ;
}

void com_copy_user(string sArg, int uid)
{
    int pid = to_int(sArg);

    "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), copy_user(uid, pid), ([]), ({uid})})) ;
}

void com_reboot(string sArg, int uid)
{
    svnup(sprintf("sysexec sleep 1 && cd ../engine/ && ps -ax | grep txos |grep `ls config.[0-9]*` | grep -v 'grep\|ls' | awk '{print $1}' | xargs kill || sleep 3 && rm -rf ../newtxii/binlog &&./txos -f -C `ls config.[0-9]*` &"));
}

static mixed gTest = (_X_gAllRunConfArray+=({"##var",}), 0); mixed _X_Get_gTest (int uid) { "cmd/common.c"->pop_msg(uid, sprintf("%s[%s]:%O", "内服调试输出开关", "##var", gTest)) ; return gTest ; } void _X_Set_gTest (int uid, mixed value) { gTest = value; "cmd/common.c"->pop_msg(uid, sprintf("设置成功，##var=%O",value)) ; } void _X_Reset_gTest (int uid) { gTest = 0; "cmd/common.c"->pop_msg(uid, sprintf("重置变量成功，##var=%O",0)) ; } mixed _X_QA_Get_gTest () { return (["desc":"内服调试输出开关", "key":"##var", "val":0]); } ;

void inner_debug(string msg)
{
    if(gTest)
    {

        debug_message(msg);
    }
}

void com_inner_test(string sArg, int uid)
{
    if(!sizeof(sArg))
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), sprintf("无效的指令:$inner_test 1(0)"), ([]), ({uid})})) ;
        return;
    }
    gTest = atoi(sArg);
    if(gTest)
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "打开内服调试开关", ([]), ({uid})})) ;
    }
    else
    {
        "sys/common/rpc.c" ->rpc_to_stateless("logic.chat.channel_chat","rpc_send_system_msg",({get_host_num(), "关闭内服调试开关", ([]), ({uid})})) ;
    }
}

varargs void process_ca_out(int usernum)
{
	string each;
    string *CaFail = ({});
	string *CmpFail = ({});
	string *UpdateFail = ({});
	string *UpdateSuc = ({});
	int iFd;
	int iTraceBack = 0;
	string msg, msg1 = "", msg2 = "";
	string filepath = "compile_ca_out.txt";


	if( (iFd = log_open(filepath)) == -1)
	{

		return;
	}

	while(each = log_read(iFd))
	{
		string filename = "";

		if (strsrch(each, "error") != -1)
		{
			CmpFail += ({each});
		}
		else if (strsrch(each, "出错") != -1)
		{
			CmpFail += ({each});
		}
		else if (strsrch(each, "错误") != -1)
		{
			CmpFail += ({each});
		}
		else if (strsrch(each, "Traceback") != -1)
		{
			iTraceBack = 1;
		}
        else if(iTraceBack == 1)
        {
            CaFail += ({ each });
        }

		if(sscanf(each, "U         %s\n", filename) == 1
				|| sscanf(each, "U\t%s\n", filename) == 1)
		{
			string err;
			if(strsrch(filename, ".c") == -1)
			{
				filename = filename + ".c";
			}

			if (!file_exist(filename))
			{
				msg = sprintf("文件不存在:%s", filename);
				"sys/common/error"->push_error(msg) ;
				msg1 += msg + "#r";
				continue;
			}
			err = catch(CMN_MODULE->update_file(filename));
			if (sizeof(err) > 0)
			{
				UpdateFail += ({filename});
			}
			else
			{
				UpdateSuc += ({filename});
			}
		}
	}
	log_close(iFd);

	if (iTraceBack)
	{
        msg1 += "#R编表报错(Traceback)";
        if(sizeof(CaFail) > 0)
        {
            foreach(string error in CaFail)
            {
			    msg1 += error + "#r";
            }
        }
        "sys/common/error"->push_error(msg1) ;
		return;
	}
	else if (sizeof(CmpFail) > 0)
	{
		msg1 += "#R编表报错" + "#r";
		foreach (string error in CmpFail)
		{
			msg1 += error + "#r";
		}
		"sys/common/error"->push_error(msg1) ;
		return;
	}
	msg1 += "#G编表成功"+"#r";

	if (sizeof(UpdateFail) > 0)
	{
		msg1 += "#R更新报错" +"#r";
		foreach (string filename in UpdateFail)
		{
			msg1 += filename + "#r";
		}
		"sys/common/error"->push_error(msg1) ;
		return;
	}
	msg1 += sprintf("#G更新成功(文件个数：%d)#r", sizeof(UpdateSuc));
	foreach (string filename in UpdateSuc)
	{
		msg1 += filename + "#r";
	}
	"sys/common/error"->push_error(msg1) ;
}


void com_kill(string sArg, int uid)
{
    if(is_inner())  "sys/common/rpc.c" ->rpc_to_stateless("logic.role.utils", "rpc_set_var", ({ ("cmd/easy_fabao"->get_stateless_table( "hostid" )) , uid,  "hostid" , 0}));
    ("cmd/login"->kick_user(uid)) ;
}
